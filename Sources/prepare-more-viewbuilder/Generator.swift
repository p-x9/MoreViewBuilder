//
//  Generator.swift
//
//
//  Created by p-x9 on 2023/01/27.
//
//

import Foundation

extension String {
    static var tab: String {
        "    "
    }
}

class Generator {
    private let fileManger = FileManager.default

    let outputURL: URL
    let max: Int

    private var header: String {
        """
        // swiftlint:disable all
        // Generated by MoreViewBuilder (https://github.com/p-x9/MoreViewBuilder)

        import SwiftUI

        public extension ViewBuilder {

        """
    }

    public init(outputURL: URL, max: Int ) {
        self.outputURL = outputURL
        self.max = max
    }

    func generate() throws {
        guard max > 10 else { return }

        var output = header

        (11...max)
            .forEach {
                output += "\n"
                output += generateViewBuilderCode(for: $0)
            }

        output += "}"

        let outputURL = self.outputURL.appendingPathComponent("ViewBuilder+.generated.swift")
        if fileManger.fileExists(atPath: outputURL.path) {
            try fileManger.removeItem(at: outputURL)
        }

        guard let data = output.data(using: .utf8) else { return }

        try data.write(to: outputURL)
    }

}

extension Generator {
    private func generateViewBuilderCode(for numberOfInput: Int) -> String{
        let range = 0..<numberOfInput
        let generics = range
            .map {
                "C\($0)"
            }
            .joined(separator: ", ")

        let inputs = range
            .map {
                "_ c\($0): C\($0)"
            }
            .joined(separator: ", ")

        let tupleGenerics = range
            .map {
                "C\($0)"
            }
            .joined(separator: ", ")

        let tupleGenericConstraints = range
            .map {
                "C\($0): View"
            }
            .joined(separator: ", ")

        let tupleInputs = range
            .map {
                "c\($0)"
            }
            .joined(separator: ", ")

        let tab = String.tab

        return """
        \(tab)static func buildBlock<\(generics)>(\(inputs)) -> TupleView<(\(tupleGenerics))> where \(tupleGenericConstraints) {
        \(tab)\(tab)TupleView((\(tupleInputs)))
        \(tab)}
        """
    }
}
